{"version":3,"sources":["Components/Radar/Radar.js","Components/App/App.js","index.js"],"names":["getPointPosition","latlng","distance","heading","rad","Math","PI","radInv","R","lon1","lng","lat1","lat","rheading","sinLat1","sin","cosLat1","cos","cosDistR","sinDistR","lat2","asin","lon2","atan2","RadarPolyLine","props","useState","setHeading","center","positions","length","useEffect","timer1","setTimeout","clearTimeout","Polyline","pathOptions","color","weight","Radar","radarColor","radarPosition","position","radarRadius","radius","map","useMapEvent","e","setWeight","getZoom","toString","circles","count","i","getCircles","trunc","points","push","getPointsPosition","LayerGroup","Circle","time","circlesRadius","fillOpacity","MapEvents","mapEvent","clickPosition","radarMovable","changeRadarPosition","setView","animate","App","startPosition","movable","setMovable","setRadarPosition","setRadius","setColor","setMap","id","className","onClick","locate","on","flyTo","type","checked","onChange","value","target","replace","MapContainer","eventHandlers","click","console","log","whenCreated","zoom","style","height","TileLayer","url","attribution","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ead93d6.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './Radar.scss';\nimport {Circle, LayerGroup, Polyline, useMapEvent} from \"react-leaflet\";\n\nconst getPointPosition = (latlng, distance, heading) => {\n    heading = (heading + 360) % 360;\n    let rad = Math.PI / 180,\n        radInv = 180 / Math.PI,\n        R = 6378137, // approximation of Earth's radius\n        lon1 = latlng.lng * rad,\n        lat1 = latlng.lat * rad,\n        rheading = heading * rad,\n        sinLat1 = Math.sin(lat1),\n        cosLat1 = Math.cos(lat1),\n        cosDistR = Math.cos(distance / R),\n        sinDistR = Math.sin(distance / R),\n        lat2 = Math.asin(sinLat1 * cosDistR + cosLat1 *\n            sinDistR * Math.cos(rheading)),\n        lon2 = lon1 + Math.atan2(Math.sin(rheading) * sinDistR *\n            cosLat1, cosDistR - sinLat1 * Math.sin(lat2));\n    lon2 = lon2 * radInv;\n    lon2 = lon2 > 180 ? lon2 - 360 : lon2 < -180 ? lon2 + 360 : lon2;\n    return [lat2 * radInv, lon2];\n}\n\nconst getPointsPosition = (latlng, distance) => {\n    let points = [];\n    let heading = [0, 180, 270, 90];\n    for (let i = 0; i < 4; i++) {\n        points.push(getPointPosition(latlng, distance, heading[i]));\n    }\n    return [[points[0], points[1]], [points[2], points[3]]];\n}\n\nconst RadarPolyLine = (props) => {\n    const [heading, setHeading] = useState(0);\n    const center = props.center;\n    const point = getPointPosition(center, props.length, heading);\n    const positions = [center, point];\n    const delay = 5;\n    useEffect(() => {\n        let timer1 = setTimeout(() => setHeading((heading <= 360) ? (heading + 1) : 0), delay);\n        return () => {\n            clearTimeout(timer1);\n        };\n    }, [heading]);\n    return (\n        <Polyline\n            positions={positions}\n            pathOptions={{color: props.color, weight: props.weight}}\n        />\n    );\n}\n\nconst Radar = (props) => {\n    const radarColor = props.color;\n    const radarPosition = props.position;\n    const radarRadius = props.radius\n    const map = useMapEvent('zoom', (e) => {\n        setWeight((map.getZoom() / 6).toString());\n    });\n    const [weight, setWeight] = useState((map.getZoom() / 6).toString());\n    const getCircles = (count, radius) => {\n        let circles = [];\n        for (let i = 1; i < count; i++) {\n            circles[i - 1] = radius - i * 100;\n        }\n        ;\n        return circles;\n    }\n    const circlesCount = Math.trunc(radarRadius / 100);\n    const circles = getCircles(circlesCount, radarRadius);\n    const points = getPointsPosition(radarPosition, radarRadius);\n    if (radarRadius < 100) return null;\n    return (\n        <LayerGroup>\n            <Circle\n                center={radarPosition} radius={radarRadius}\n                pathOptions={{color: radarColor, weight: weight}}\n            />\n            <Polyline\n                positions={points}\n                pathOptions={{color: radarColor, weight: weight}}\n            />\n            <RadarPolyLine\n                center={radarPosition}\n                color={radarColor}\n                weight={weight}\n                time={2}\n                length={radarRadius}\n            />\n            {circles.map((circlesRadius, i) =>\n                <Circle\n                    key={\"Circle\" + i}\n                    center={radarPosition} radius={circlesRadius}\n                    pathOptions={{color: radarColor, weight: weight - 1, fillOpacity: 0}}\n                />\n            )}\n        </LayerGroup>\n    );\n}\nexport default Radar;","import React, {useState} from 'react';\nimport {MapContainer, TileLayer, useMapEvent} from 'react-leaflet';\nimport Radar from \"../Radar/Radar\";\nimport \"leaflet/dist/leaflet.css\";\nimport './App.scss';\n\nconst MapEvents = (props) => {\n    const mapEvent = useMapEvent('click', (e) => {\n        const clickPosition = e.latlng;\n        if (props.radarMovable) {\n            props.changeRadarPosition(clickPosition);\n        } else {\n            mapEvent.setView(clickPosition, mapEvent.getZoom(), {animate: true,});\n        }\n    });\n    return null;\n}\n\nconst App = () => {\n    const startPosition = {lat: 59.94, lng: 30.3}\n    const [movable, setMovable] = useState(false);\n    const [radarPosition, setRadarPosition] = useState(startPosition);\n    const [radius, setRadius] = useState(0.5);\n    const [color, setColor] = useState('#00FF00');\n    const [map, setMap] = useState(null);\n\n    const GoToNowPosition = () => {\n        map.locate().on(\"locationfound\", function (e) {\n            map.flyTo(e.latlng, map.getZoom());\n            setRadarPosition(e.latlng);\n        })\n    };\n\n    return (\n        <div id=\"App\">\n            <div className={'map__buttons_container'}>\n                <button className={'map__button_goto map__control_element__container'} onClick={GoToNowPosition}>\n                    Перместиться на текущую локцию\n                </button>\n                <label className={'map__checkbox_movable__container map__control_element__container'}>\n                    <input className={'map__checkbox_movable__input'} type={\"checkbox\"} checked={movable}\n                           onChange={() => setMovable(!movable)}/>\n                    <p>Перемещение радара по клику</p>\n                </label>\n                <label className={'map__radius_input__container map__control_element__container'}>\n                    <p>Введите радиус радара(км):</p>\n                    <input className={'map__radius_input__field'} type={\"text\"} value={radius}\n                           onChange={(e) => setRadius(e.target.value.replace(',', '.'))}/>\n                </label>\n                <label className={'map__color_input__container map__control_element__container'}>\n                    <p>Выберите цвет для радара:</p>\n                    <input className={'map__color_input__field'} type={\"color\"} value={color}\n                           onChange={(e) => setColor(e.target.value)}/>\n                </label>\n            </div>\n            <MapContainer eventHandlers={{click: (e) => console.log(e)}} whenCreated={setMap} center={startPosition}\n                          zoom={14} style={{height: \"100vh\"}}>\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; Site created by <a href=\"https://github.com/finn3r/\">Finner</a>'/>\n                <MapEvents radarMovable={movable} changeRadarPosition={setRadarPosition}/>\n                <Radar color={color} position={radarPosition} radius={radius * 1000}/>\n            </MapContainer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}